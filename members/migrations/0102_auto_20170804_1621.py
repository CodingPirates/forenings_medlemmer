# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2017-08-04 14:21
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

from django.contrib.auth.hashers import make_password

def set_unusable_password(apps, schema_editor):
    Person = apps.get_model('members', 'person')
    people = Person.objects.all()
    for person in people:
        # make_password is being used instead of the set_unusable_password function because Django is providing us with a fake model
        person.password = make_password(None)
        person.save()

def delete_department_admins(apps, schema_editor):
    # we transitioned from using django's user to using people as our user model
    adminuserinformation = apps.get_model('members', 'adminuserinformation')
    adminuserinformation.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('members', '0101_activity_member_justified'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='adminuserinformation',
            name='user',
        ),
        migrations.AddField(
            model_name='adminuserinformation',
            name='person',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='person',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='person',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='person',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='person',
            name='password',
            field=models.CharField(default='', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='activity',
            name='member_justified',
            field=models.BooleanField(default=True, help_text='Bestemmer om personerne bliver til medlemmer i forhold til DUF. De fleste aktiviteter er sæsoner og medlemsberettiget. Hvis du er i tvivl, så spørg på Slack i #medlemsssystem-support.', verbose_name='Aktiviteten gør personen til medlem'),
        ),
        migrations.AlterField(
            model_name='person',
            name='email',
            field=models.EmailField(blank=True, max_length=254, unique=True),
        ),
        migrations.RunPython(set_unusable_password),
        migrations.RunPython(delete_department_admins),
    ]
