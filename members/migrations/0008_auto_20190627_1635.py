# Generated by Django 2.2.2 on 2019-06-27 14:35

from django.db import migrations

def move_person(apps, schema_editor):
    Person = apps.get_model('members', 'Person')
    Address = apps.get_model('members', 'Address')
    dawa_ids = Address.objects.values_list('dawa_id', flat=True)
    for person in Person.objects.filter(address_moved=False):
        if person.dawa_id in dawa_ids:
            person.postal_address = Address.objects.get(dawa_id=person.dawa_id)
        else:
            if person.address_invalid:
                person.streetname = ""
                person.housenumber = ""
                person.floor = ""
                person.door = ""
                person.city = ""
                person.zipcode = ""
                person.municipality = ""
                person.placename = ""
                person.longitude = ""
                person.latitude = ""
                person.dawa_id = ""
                person.save()
            else:
                # Address not already in Address table. Create new record
                new_address = Address.objects.create(
                    streetname = person.streetname,
                    housenumber = person.housenumber,
                    floor = person.floor,
                    door = person.door,
                    city = person.city,
                    zipcode = person.zipcode,
                    municipality = person.municipality,
                    placename = person.placename,
                    longitude = person.longitude,
                    latitude = person.latitude,
                    dawa_id = person.dawa_id,
                )
        person.address_moved = True
        person.save()


def reverse_move_person(apps, schema_editor):
    Person = apps.get_model('members', 'Person')
    Address = apps.get_model('members', 'Address')
    for address in Address.objects.all():
        for person in Person.objects.filter(postal_address=address.pk):
            person.streetname = address.streetname,
            person.housenumber = address.housenumber,
            person.floor = address.floor,
            person.door = address.door,
            person.city = address.city,
            person.zipcode = address.zipcode,
            person.municipality = address.municipality,
            person.placename = address.placename,
            person.longitude = address.longitude,
            person.latitude = address.latitude,
            person.dawa_id = address.dawa_id,
            person.address_invalid = address.address_invalid
            person.address_moved = False
            person.save()


def move_activity(apps, schema_editor):
    Activity = apps.get_model('members', 'Activity')
    Address = apps.get_model('members', 'Address')
    dawa_ids = Address.objects.values_list('dawa_id', flat=True)
    for activity in Activity.objects.filter(address_moved=False):
        if activity.dawa_id in dawa_ids:
            activity.postal_address = Address.objects.get(dawa_id=activity.dawa_id)
        else:
            # Address not already in Address table. Create new record
            new_address = Address.objects.create(
                streetname = activity.streetname,
                housenumber = activity.housenumber,
                floor = activity.floor,
                door = activity.door,
                city = activity.city,
                zipcode = activity.zipcode,
                municipality = activity.municipality,
                placename = activity.placename,
                longitude = activity.longitude,
                latitude = activity.latitude,
                dawa_id = activity.dawa_id,
            )
        activity.address_moved = True
        activity.save()


def reverse_move_activity(apps, schema_editor):
    Activity = apps.get_model('members', 'Activity')
    Address = apps.get_model('members', 'Address')
    for address in Address.objects.all():
        for activity in Activity.objects.filter(postal_address=activity.pk):
            activity.streetname = address.streetname,
            activity.housenumber = address.housenumber,
            activity.floor = address.floor,
            activity.door = address.door,
            activity.city = address.city,
            activity.zipcode = address.zipcode,
            activity.municipality = address.municipality,
            activity.placename = address.placename,
            activity.longitude = address.longitude,
            activity.latitude = address.latitude,
            activity.dawa_id = address.dawa_id,
            activity.address_invalid = address.address_invalid
            activity.address_moved = False
            activity.save()

def move_department(apps, schema_editor):
    Department = apps.get_model('members', 'Department')
    Address = apps.get_model('members', 'Address')
    dawa_ids = Address.objects.values_list('dawa_id', flat=True)
    for department in Department.objects.filter(address_moved=False):
        if department.dawa_id in dawa_ids:
            department.postal_address = Address.objects.get(dawa_id=department.dawa_id)
        else:
            # Address not already in Address table. Create new record
            new_address = Address.objects.create(
                streetname = department.streetname,
                housenumber = department.housenumber,
                floor = department.floor,
                door = department.door,
                city = department.city,
                zipcode = department.zipcode,
                municipality = department.municipality,
                placename = department.placename,
                longitude = department.longitude,
                latitude = department.latitude,
                dawa_id = department.dawa_id,
            )
        department.address_moved = True
        department.save()


def reverse_move_department(apps, schema_editor):
    Department = apps.get_model('members', 'Department')
    Address = apps.get_model('members', 'Address')
    for address in Address.objects.all():
        for department in Department.objects.filter(postal_address=address.pk):
            department.streetname = address.streetname,
            department.housenumber = address.housenumber,
            department.floor = address.floor,
            department.door = address.door,
            department.city = address.city,
            department.zipcode = address.zipcode,
            department.municipality = address.municipality,
            department.placename = address.placename,
            department.longitude = address.longitude,
            department.latitude = address.latitude,
            department.dawa_id = address.dawa_id,
            department.address_invalid = address.address_invalid
            department.address_moved = False
            department.save()

def move_union(apps, schema_editor):
    Union = apps.get_model('members', 'Union')
    Address = apps.get_model('members', 'Address')
    streetnames = Address.objects.values_list('streetname', flat=True)
    for union in Union.objects.filter(address_moved=False):
        if union.streetname in streetnames:
            union.postal_address = Address.objects.get(streetname=union.streetname)
        else:
            # Address not already in Address table. Create new record
            new_address = Address.objects.create(
                streetname = union.streetname,
                housenumber = union.housenumber,
                floor = union.floor,
                door = union.door,
                city = union.city,
                zipcode = union.zipcode,
                placename = union.placename,
            )
        union.address_moved = True
        union.save()


def reverse_move_union(apps, schema_editor):
    Union = apps.get_model('members', 'Union')
    Address = apps.get_model('members', 'Address')
    for address in Address.objects.all():
        for union in Person.objects.filter(postal_address=address.pk):
            union.streetname = address.streetname,
            union.housenumber = address.housenumber,
            union.floor = address.floor,
            union.door = address.door,
            union.city = address.city,
            union.zipcode = address.zipcode,
            union.placename = address.placename,
            union.address_moved = False
            union.save()


class Migration(migrations.Migration):

    dependencies = [
        ('members', '0007_auto_20190731_0904'),
    ]

    operations = [
        migrations.RunPython(move_person, reverse_move_person),
        migrations.RunPython(move_activity, reverse_move_activity),
        migrations.RunPython(move_department, reverse_move_department),
        migrations.RunPython(move_union, reverse_move_union),
    ]